# https://clang.llvm.org/docs/ClangFormatStyleOptions.html
#
# Based on the Linux Kernel coding style guidelines.

BasedOnStyle:               LLVM
IndentWidth:                8           # Linux style uses 8-space indentation
TabWidth:                   8           # Set tab width to 8 spaces
UseTab:                     Never       # Prefer tabs for indentation, aligning with Linux style
ContinuationIndentWidth:    8           # Continuation indent also uses 8 spaces

AllowAllParametersOfDeclarationOnNextLine: true
MacroBlockBegin:    DoNotWrap
MacroBlockEnd:      DoNotWrap

# Allow Short ...
AllowShortIfStatementsOnASingleLine:    false   # Avoid single-line if statements
AllowShortLoopsOnASingleLine:           false   # No single-line while or for loops
AllowShortBlocksOnASingleLine:          Empty   # Avoid single-line blocks without braces
AllowShortFunctionsOnASingleLine:       Empty   # Avoid single-line functions.
AllowShortEnumsOnASingleLine:           true

# Align Consective ...
AlignConsecutiveAssignments:            false
AlignConsecutiveDeclarations:           true
AlignConsecutiveMacros:
    Enabled:                                true
    AcrossEmptyLines:                       true
    AcrossComments:                         true
AlignConsecutiveBitFields:              true
AlignConsecutiveShortCaseStatements:
    Enabled:                                true
AlignEscapedNewlines:                   LeftWithLastLine
AlignOperands:                          AlignAfterOperator
AlignAfterOpenBracket:                  Align
AlignArrayOfStructures:                 Right
AlignTrailingComments:                  Never

SpaceBeforeParens:              Custom
SpaceBeforeParensOptions:
    AfterControlStatements:         true
    AfterFunctionDefinitionName:    false
SpacesInParens:                 Custom
SpacesInParensOptions:
    ExceptDoubleParentheses:        true
    Other: false
SpaceBeforeSquareBrackets:      false
SpaceAfterLogicalNot:           false
SpaceAfterCStyleCast:           false
SpaceBeforeCaseColon:           false
SpaceBeforeAssignmentOperators: true
SpacesBeforeTrailingComments:   1
ReflowComments:                 false

ColumnLimit:            80              # Standard column width in Linux code is 80 characters
BreakBeforeBraces:      Linux           # Brace style similar to Linux style guide
IndentPPDirectives:     None
PPIndentWidth:          2
IncludeBlocks:          Regroup
SortIncludes:           Never
IncludeCategories:
  - Regex:                  '^<.*>$'
    Priority:               1
    SortPriority:           1
  - Regex:                  '^".*"$'
    Priority:               2
MaxEmptyLinesToKeep:    2
QualifierAlignment:     Left

BraceWrapping:
  AfterFunction:            false   # Function braces on the same line as the function name
  AfterClass:               true    # Class braces on a new line
  AfterStruct:              true    # Struct braces on a new line
  AfterControlStatement:    false   # Control statement braces on the same line
  BeforeElse:               false   # Else on the same line as the closing brace of if
  SplitEmptyFunction:       false   # Empty functions on a single line, if possible

PointerAlignment: Right             # Align pointers to the left as per Linux style

# When to break segment into new line.
PenaltyReturnTypeOnItsOwnLine:          9999    # Putting return types on their own line
PenaltyBreakBeforeFirstCallParameter:   80      # Breaking function parameters
PenaltyBreakAssignment:                 0       # Breaking assignments
AlwaysBreakBeforeMultilineStrings:      False

# Bin Pack ...
BinPackArguments:   false
BinPackParameters:  true                    # Prevent each format parameter to be on own line.

# Allow C++11-style braces and a few formatting tweaks
Cpp11BracedListStyle: false

# SpacesInParentheses:    false               # No spaces within parentheses
# SpaceBeforeParens:      ControlStatements   # Spaces before control statement parentheses only
